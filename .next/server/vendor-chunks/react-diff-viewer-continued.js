"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-diff-viewer-continued";
exports.ids = ["vendor-chunks/react-diff-viewer-continued"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-diff-viewer-continued/lib/src/compute-hidden-blocks.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/react-diff-viewer-continued/lib/src/compute-hidden-blocks.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.computeHiddenBlocks = void 0;\nfunction computeHiddenBlocks(lineInformation, diffLines, extraLines) {\n    let newBlockIndex = 0;\n    let currentBlock;\n    let lineBlocks = {};\n    let blocks = [];\n    lineInformation.forEach((line, lineIndex) => {\n        const isDiffLine = diffLines.some(diffLine => diffLine >= lineIndex - extraLines && diffLine <= lineIndex + extraLines);\n        if (!isDiffLine && currentBlock == undefined) {\n            // block begins\n            currentBlock = {\n                index: newBlockIndex,\n                startLine: lineIndex,\n                endLine: lineIndex,\n                lines: 1\n            };\n            blocks.push(currentBlock);\n            lineBlocks[lineIndex] = currentBlock.index;\n            newBlockIndex++;\n        }\n        else if (!isDiffLine) {\n            // block continues\n            currentBlock.endLine = lineIndex;\n            currentBlock.lines++;\n            lineBlocks[lineIndex] = currentBlock.index;\n        }\n        else {\n            // not a block anymore\n            currentBlock = undefined;\n        }\n    });\n    return {\n        lineBlocks,\n        blocks: blocks\n    };\n}\nexports.computeHiddenBlocks = computeHiddenBlocks;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGlmZi12aWV3ZXItY29udGludWVkL2xpYi9zcmMvY29tcHV0ZS1oaWRkZW4tYmxvY2tzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aXRlLXJlYWN0LXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1kaWZmLXZpZXdlci1jb250aW51ZWQvbGliL3NyYy9jb21wdXRlLWhpZGRlbi1ibG9ja3MuanM/M2UyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29tcHV0ZUhpZGRlbkJsb2NrcyA9IHZvaWQgMDtcbmZ1bmN0aW9uIGNvbXB1dGVIaWRkZW5CbG9ja3MobGluZUluZm9ybWF0aW9uLCBkaWZmTGluZXMsIGV4dHJhTGluZXMpIHtcbiAgICBsZXQgbmV3QmxvY2tJbmRleCA9IDA7XG4gICAgbGV0IGN1cnJlbnRCbG9jaztcbiAgICBsZXQgbGluZUJsb2NrcyA9IHt9O1xuICAgIGxldCBibG9ja3MgPSBbXTtcbiAgICBsaW5lSW5mb3JtYXRpb24uZm9yRWFjaCgobGluZSwgbGluZUluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGlzRGlmZkxpbmUgPSBkaWZmTGluZXMuc29tZShkaWZmTGluZSA9PiBkaWZmTGluZSA+PSBsaW5lSW5kZXggLSBleHRyYUxpbmVzICYmIGRpZmZMaW5lIDw9IGxpbmVJbmRleCArIGV4dHJhTGluZXMpO1xuICAgICAgICBpZiAoIWlzRGlmZkxpbmUgJiYgY3VycmVudEJsb2NrID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gYmxvY2sgYmVnaW5zXG4gICAgICAgICAgICBjdXJyZW50QmxvY2sgPSB7XG4gICAgICAgICAgICAgICAgaW5kZXg6IG5ld0Jsb2NrSW5kZXgsXG4gICAgICAgICAgICAgICAgc3RhcnRMaW5lOiBsaW5lSW5kZXgsXG4gICAgICAgICAgICAgICAgZW5kTGluZTogbGluZUluZGV4LFxuICAgICAgICAgICAgICAgIGxpbmVzOiAxXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYmxvY2tzLnB1c2goY3VycmVudEJsb2NrKTtcbiAgICAgICAgICAgIGxpbmVCbG9ja3NbbGluZUluZGV4XSA9IGN1cnJlbnRCbG9jay5pbmRleDtcbiAgICAgICAgICAgIG5ld0Jsb2NrSW5kZXgrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaXNEaWZmTGluZSkge1xuICAgICAgICAgICAgLy8gYmxvY2sgY29udGludWVzXG4gICAgICAgICAgICBjdXJyZW50QmxvY2suZW5kTGluZSA9IGxpbmVJbmRleDtcbiAgICAgICAgICAgIGN1cnJlbnRCbG9jay5saW5lcysrO1xuICAgICAgICAgICAgbGluZUJsb2Nrc1tsaW5lSW5kZXhdID0gY3VycmVudEJsb2NrLmluZGV4O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gbm90IGEgYmxvY2sgYW55bW9yZVxuICAgICAgICAgICAgY3VycmVudEJsb2NrID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbGluZUJsb2NrcyxcbiAgICAgICAgYmxvY2tzOiBibG9ja3NcbiAgICB9O1xufVxuZXhwb3J0cy5jb21wdXRlSGlkZGVuQmxvY2tzID0gY29tcHV0ZUhpZGRlbkJsb2NrcztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-diff-viewer-continued/lib/src/compute-hidden-blocks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-diff-viewer-continued/lib/src/compute-lines.js":
/*!***************************************************************************!*\
  !*** ./node_modules/react-diff-viewer-continued/lib/src/compute-lines.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.computeLineInformation = exports.DiffMethod = exports.DiffType = void 0;\nconst diff = __importStar(__webpack_require__(/*! diff */ \"(ssr)/./node_modules/diff/lib/index.js\"));\nconst jsDiff = diff;\nvar DiffType;\n(function (DiffType) {\n    DiffType[DiffType[\"DEFAULT\"] = 0] = \"DEFAULT\";\n    DiffType[DiffType[\"ADDED\"] = 1] = \"ADDED\";\n    DiffType[DiffType[\"REMOVED\"] = 2] = \"REMOVED\";\n    DiffType[DiffType[\"CHANGED\"] = 3] = \"CHANGED\";\n})(DiffType || (exports.DiffType = DiffType = {}));\n// See https://github.com/kpdecker/jsdiff/tree/v4.0.1#api for more info on the below JsDiff methods\nvar DiffMethod;\n(function (DiffMethod) {\n    DiffMethod[\"CHARS\"] = \"diffChars\";\n    DiffMethod[\"WORDS\"] = \"diffWords\";\n    DiffMethod[\"WORDS_WITH_SPACE\"] = \"diffWordsWithSpace\";\n    DiffMethod[\"LINES\"] = \"diffLines\";\n    DiffMethod[\"TRIMMED_LINES\"] = \"diffTrimmedLines\";\n    DiffMethod[\"SENTENCES\"] = \"diffSentences\";\n    DiffMethod[\"CSS\"] = \"diffCss\";\n    DiffMethod[\"JSON\"] = \"diffJson\";\n})(DiffMethod || (exports.DiffMethod = DiffMethod = {}));\n/**\n * Splits diff text by new line and computes final list of diff lines based on\n * conditions.\n *\n * @param value Diff text from the js diff module.\n */\nconst constructLines = (value) => {\n    if (value === '')\n        return [];\n    const lines = value.replace(/\\n$/, '').split('\\n');\n    return lines;\n};\n/**\n * Computes word diff information in the line.\n * [TODO]: Consider adding options argument for JsDiff text block comparison\n *\n * @param oldValue Old word in the line.\n * @param newValue New word in the line.\n * @param compareMethod JsDiff text diff method from https://github.com/kpdecker/jsdiff/tree/v4.0.1#api\n */\nconst computeDiff = (oldValue, newValue, compareMethod = DiffMethod.CHARS) => {\n    const diffArray = jsDiff[compareMethod](oldValue, newValue);\n    const computedDiff = {\n        left: [],\n        right: [],\n    };\n    diffArray.forEach(({ added, removed, value }) => {\n        const diffInformation = {};\n        if (added) {\n            diffInformation.type = DiffType.ADDED;\n            diffInformation.value = value;\n            computedDiff.right.push(diffInformation);\n        }\n        if (removed) {\n            diffInformation.type = DiffType.REMOVED;\n            diffInformation.value = value;\n            computedDiff.left.push(diffInformation);\n        }\n        if (!removed && !added) {\n            diffInformation.type = DiffType.DEFAULT;\n            diffInformation.value = value;\n            computedDiff.right.push(diffInformation);\n            computedDiff.left.push(diffInformation);\n        }\n        return diffInformation;\n    });\n    return computedDiff;\n};\n/**\n * [TODO]: Think about moving common left and right value assignment to a\n * common place. Better readability?\n *\n * Computes line wise information based in the js diff information passed. Each\n * line contains information about left and right section. Left side denotes\n * deletion and right side denotes addition.\n *\n * @param oldString Old string to compare.\n * @param newString New string to compare with old string.\n * @param disableWordDiff Flag to enable/disable word diff.\n * @param lineCompareMethod JsDiff text diff method from https://github.com/kpdecker/jsdiff/tree/v4.0.1#api\n * @param linesOffset line number to start counting from\n * @param showLines lines that are always shown, regardless of diff\n */\nconst computeLineInformation = (oldString, newString, disableWordDiff = false, lineCompareMethod = DiffMethod.CHARS, linesOffset = 0, showLines = []) => {\n    let diffArray = [];\n    // Use diffLines for strings, and diffJson for objects...\n    if (typeof oldString === 'string' && typeof newString === 'string') {\n        diffArray = diff.diffLines(oldString.trimRight(), newString.trimRight(), {\n            newlineIsToken: false,\n            ignoreWhitespace: false,\n            ignoreCase: false,\n        });\n    }\n    else {\n        diffArray = diff.diffJson(oldString, newString);\n    }\n    let rightLineNumber = linesOffset;\n    let leftLineNumber = linesOffset;\n    let lineInformation = [];\n    let counter = 0;\n    const diffLines = [];\n    const ignoreDiffIndexes = [];\n    const getLineInformation = (value, diffIndex, added, removed, evaluateOnlyFirstLine) => {\n        const lines = constructLines(value);\n        return lines\n            .map((line, lineIndex) => {\n            const left = {};\n            const right = {};\n            if (ignoreDiffIndexes.includes(`${diffIndex}-${lineIndex}`) ||\n                (evaluateOnlyFirstLine && lineIndex !== 0)) {\n                return undefined;\n            }\n            if (added || removed) {\n                let countAsChange = true;\n                if (removed) {\n                    leftLineNumber += 1;\n                    left.lineNumber = leftLineNumber;\n                    left.type = DiffType.REMOVED;\n                    left.value = line || ' ';\n                    // When the current line is of type REMOVED, check the next item in\n                    // the diff array whether it is of type ADDED. If true, the current\n                    // diff will be marked as both REMOVED and ADDED. Meaning, the\n                    // current line is a modification.\n                    const nextDiff = diffArray[diffIndex + 1];\n                    if (nextDiff && nextDiff.added) {\n                        const nextDiffLines = constructLines(nextDiff.value)[lineIndex];\n                        if (nextDiffLines) {\n                            const nextDiffLineInfo = getLineInformation(nextDiffLines, diffIndex, true, false, true);\n                            const { value: rightValue, lineNumber, type, } = nextDiffLineInfo[0].right;\n                            // When identified as modification, push the next diff to ignore\n                            // list as the next value will be added in this line computation as\n                            // right and left values.\n                            ignoreDiffIndexes.push(`${diffIndex + 1}-${lineIndex}`);\n                            right.lineNumber = lineNumber;\n                            if (left.value === rightValue) {\n                                // The new value is exactly the same as the old\n                                countAsChange = false;\n                                right.type = 0;\n                                left.type = 0;\n                                right.value = rightValue;\n                            }\n                            else {\n                                right.type = type;\n                                // Do char level diff and assign the corresponding values to the\n                                // left and right diff information object.\n                                if (disableWordDiff) {\n                                    right.value = rightValue;\n                                }\n                                else {\n                                    const computedDiff = computeDiff(line, rightValue, lineCompareMethod);\n                                    right.value = computedDiff.right;\n                                    left.value = computedDiff.left;\n                                }\n                            }\n                        }\n                    }\n                }\n                else {\n                    rightLineNumber += 1;\n                    right.lineNumber = rightLineNumber;\n                    right.type = DiffType.ADDED;\n                    right.value = line;\n                }\n                if (countAsChange && !evaluateOnlyFirstLine) {\n                    if (!diffLines.includes(counter)) {\n                        diffLines.push(counter);\n                    }\n                }\n            }\n            else {\n                leftLineNumber += 1;\n                rightLineNumber += 1;\n                left.lineNumber = leftLineNumber;\n                left.type = DiffType.DEFAULT;\n                left.value = line;\n                right.lineNumber = rightLineNumber;\n                right.type = DiffType.DEFAULT;\n                right.value = line;\n            }\n            if ((showLines === null || showLines === void 0 ? void 0 : showLines.includes(`L-${left.lineNumber}`)) || (showLines === null || showLines === void 0 ? void 0 : showLines.includes(`R-${right.lineNumber}`)) && !diffLines.includes(counter)) {\n                diffLines.push(counter);\n            }\n            if (!evaluateOnlyFirstLine) {\n                counter += 1;\n            }\n            return { right, left };\n        })\n            .filter(Boolean);\n    };\n    diffArray.forEach(({ added, removed, value }, index) => {\n        lineInformation = [\n            ...lineInformation,\n            ...getLineInformation(value, index, added, removed),\n        ];\n    });\n    return {\n        lineInformation,\n        diffLines,\n    };\n};\nexports.computeLineInformation = computeLineInformation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-diff-viewer-continued/lib/src/compute-lines.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-diff-viewer-continued/lib/src/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/react-diff-viewer-continued/lib/src/index.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DiffMethod = exports.LineNumberPrefix = void 0;\nconst jsx_runtime_1 = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nconst React = __importStar(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nconst classnames_1 = __importDefault(__webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\"));\nconst compute_lines_1 = __webpack_require__(/*! ./compute-lines */ \"(ssr)/./node_modules/react-diff-viewer-continued/lib/src/compute-lines.js\");\nObject.defineProperty(exports, \"DiffMethod\", ({ enumerable: true, get: function () { return compute_lines_1.DiffMethod; } }));\nconst styles_1 = __importDefault(__webpack_require__(/*! ./styles */ \"(ssr)/./node_modules/react-diff-viewer-continued/lib/src/styles.js\"));\nconst compute_hidden_blocks_1 = __webpack_require__(/*! ./compute-hidden-blocks */ \"(ssr)/./node_modules/react-diff-viewer-continued/lib/src/compute-hidden-blocks.js\");\nconst m = __webpack_require__(/*! memoize-one */ \"(ssr)/./node_modules/memoize-one/dist/memoize-one.esm.js\");\nconst memoize = m.default || m;\nvar LineNumberPrefix;\n(function (LineNumberPrefix) {\n    LineNumberPrefix[\"LEFT\"] = \"L\";\n    LineNumberPrefix[\"RIGHT\"] = \"R\";\n})(LineNumberPrefix || (exports.LineNumberPrefix = LineNumberPrefix = {}));\nclass DiffViewer extends React.Component {\n    constructor(props) {\n        super(props);\n        /**\n         * Resets code block expand to the initial stage. Will be exposed to the parent component via\n         * refs.\n         */\n        this.resetCodeBlocks = () => {\n            if (this.state.expandedBlocks.length > 0) {\n                this.setState({\n                    expandedBlocks: [],\n                });\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Pushes the target expanded code block to the state. During the re-render,\n         * this value is used to expand/fold unmodified code.\n         */\n        this.onBlockExpand = (id) => {\n            const prevState = this.state.expandedBlocks.slice();\n            prevState.push(id);\n            this.setState({\n                expandedBlocks: prevState,\n            });\n        };\n        /**\n         * Computes final styles for the diff viewer. It combines the default styles with the user\n         * supplied overrides. The computed styles are cached with performance in mind.\n         *\n         * @param styles User supplied style overrides.\n         */\n        this.computeStyles = memoize(styles_1.default);\n        /**\n         * Returns a function with clicked line number in the closure. Returns an no-op function when no\n         * onLineNumberClick handler is supplied.\n         *\n         * @param id Line id of a line.\n         */\n        this.onLineNumberClickProxy = (id) => {\n            if (this.props.onLineNumberClick) {\n                return (e) => this.props.onLineNumberClick(id, e);\n            }\n            return () => { };\n        };\n        /**\n         * Maps over the word diff and constructs the required React elements to show word diff.\n         *\n         * @param diffArray Word diff information derived from line information.\n         * @param renderer Optional renderer to format diff words. Useful for syntax highlighting.\n         */\n        this.renderWordDiff = (diffArray, renderer) => {\n            return diffArray.map((wordDiff, i) => {\n                return ((0, jsx_runtime_1.jsx)(\"span\", { className: (0, classnames_1.default)(this.styles.wordDiff, {\n                        [this.styles.wordAdded]: wordDiff.type === compute_lines_1.DiffType.ADDED,\n                        [this.styles.wordRemoved]: wordDiff.type === compute_lines_1.DiffType.REMOVED,\n                    }), children: renderer ? renderer(wordDiff.value) : wordDiff.value }, i));\n            });\n        };\n        /**\n         * Maps over the line diff and constructs the required react elements to show line diff. It calls\n         * renderWordDiff when encountering word diff. This takes care of both inline and split view line\n         * renders.\n         *\n         * @param lineNumber Line number of the current line.\n         * @param type Type of diff of the current line.\n         * @param prefix Unique id to prefix with the line numbers.\n         * @param value Content of the line. It can be a string or a word diff array.\n         * @param additionalLineNumber Additional line number to be shown. Useful for rendering inline\n         *  diff view. Right line number will be passed as additionalLineNumber.\n         * @param additionalPrefix Similar to prefix but for additional line number.\n         */\n        this.renderLine = (lineNumber, type, prefix, value, additionalLineNumber, additionalPrefix) => {\n            const lineNumberTemplate = `${prefix}-${lineNumber}`;\n            const additionalLineNumberTemplate = `${additionalPrefix}-${additionalLineNumber}`;\n            const highlightLine = this.props.highlightLines.includes(lineNumberTemplate) ||\n                this.props.highlightLines.includes(additionalLineNumberTemplate);\n            const added = type === compute_lines_1.DiffType.ADDED;\n            const removed = type === compute_lines_1.DiffType.REMOVED;\n            const changed = type === compute_lines_1.DiffType.CHANGED;\n            let content;\n            if (Array.isArray(value)) {\n                content = this.renderWordDiff(value, this.props.renderContent);\n            }\n            else if (this.props.renderContent) {\n                content = this.props.renderContent(value);\n            }\n            else {\n                content = value;\n            }\n            return ((0, jsx_runtime_1.jsxs)(React.Fragment, { children: [!this.props.hideLineNumbers && ((0, jsx_runtime_1.jsx)(\"td\", { onClick: lineNumber && this.onLineNumberClickProxy(lineNumberTemplate), className: (0, classnames_1.default)(this.styles.gutter, {\n                            [this.styles.emptyGutter]: !lineNumber,\n                            [this.styles.diffAdded]: added,\n                            [this.styles.diffRemoved]: removed,\n                            [this.styles.diffChanged]: changed,\n                            [this.styles.highlightedGutter]: highlightLine,\n                        }), children: (0, jsx_runtime_1.jsx)(\"pre\", { className: this.styles.lineNumber, children: lineNumber }) })), !this.props.splitView && !this.props.hideLineNumbers && ((0, jsx_runtime_1.jsx)(\"td\", { onClick: additionalLineNumber &&\n                            this.onLineNumberClickProxy(additionalLineNumberTemplate), className: (0, classnames_1.default)(this.styles.gutter, {\n                            [this.styles.emptyGutter]: !additionalLineNumber,\n                            [this.styles.diffAdded]: added,\n                            [this.styles.diffRemoved]: removed,\n                            [this.styles.diffChanged]: changed,\n                            [this.styles.highlightedGutter]: highlightLine,\n                        }), children: (0, jsx_runtime_1.jsx)(\"pre\", { className: this.styles.lineNumber, children: additionalLineNumber }) })), this.props.renderGutter\n                        ? this.props.renderGutter({\n                            lineNumber,\n                            type,\n                            prefix,\n                            value,\n                            additionalLineNumber,\n                            additionalPrefix,\n                            styles: this.styles,\n                        })\n                        : null, !this.props.hideMarkers && ((0, jsx_runtime_1.jsx)(\"td\", { className: (0, classnames_1.default)(this.styles.marker, {\n                            [this.styles.emptyLine]: !content,\n                            [this.styles.diffAdded]: added,\n                            [this.styles.diffRemoved]: removed,\n                            [this.styles.diffChanged]: changed,\n                            [this.styles.highlightedLine]: highlightLine,\n                        }), children: (0, jsx_runtime_1.jsxs)(\"pre\", { children: [added && '+', removed && '-'] }) })), (0, jsx_runtime_1.jsx)(\"td\", { className: (0, classnames_1.default)(this.styles.content, {\n                            [this.styles.emptyLine]: !content,\n                            [this.styles.diffAdded]: added,\n                            [this.styles.diffRemoved]: removed,\n                            [this.styles.diffChanged]: changed,\n                            [this.styles.highlightedLine]: highlightLine,\n                        }), children: (0, jsx_runtime_1.jsx)(\"pre\", { className: this.styles.contentText, children: content }) })] }));\n        };\n        /**\n         * Generates lines for split view.\n         *\n         * @param obj Line diff information.\n         * @param obj.left Life diff information for the left pane of the split view.\n         * @param obj.right Life diff information for the right pane of the split view.\n         * @param index React key for the lines.\n         */\n        this.renderSplitView = ({ left, right }, index) => {\n            return ((0, jsx_runtime_1.jsxs)(\"tr\", { className: this.styles.line, children: [this.renderLine(left.lineNumber, left.type, LineNumberPrefix.LEFT, left.value), this.renderLine(right.lineNumber, right.type, LineNumberPrefix.RIGHT, right.value)] }, index));\n        };\n        /**\n         * Generates lines for inline view.\n         *\n         * @param obj Line diff information.\n         * @param obj.left Life diff information for the added section of the inline view.\n         * @param obj.right Life diff information for the removed section of the inline view.\n         * @param index React key for the lines.\n         */\n        this.renderInlineView = ({ left, right }, index) => {\n            let content;\n            if (left.type === compute_lines_1.DiffType.REMOVED && right.type === compute_lines_1.DiffType.ADDED) {\n                return ((0, jsx_runtime_1.jsxs)(React.Fragment, { children: [(0, jsx_runtime_1.jsx)(\"tr\", { className: this.styles.line, children: this.renderLine(left.lineNumber, left.type, LineNumberPrefix.LEFT, left.value, null) }), (0, jsx_runtime_1.jsx)(\"tr\", { className: this.styles.line, children: this.renderLine(null, right.type, LineNumberPrefix.RIGHT, right.value, right.lineNumber) })] }, index));\n            }\n            if (left.type === compute_lines_1.DiffType.REMOVED) {\n                content = this.renderLine(left.lineNumber, left.type, LineNumberPrefix.LEFT, left.value, null);\n            }\n            if (left.type === compute_lines_1.DiffType.DEFAULT) {\n                content = this.renderLine(left.lineNumber, left.type, LineNumberPrefix.LEFT, left.value, right.lineNumber, LineNumberPrefix.RIGHT);\n            }\n            if (right.type === compute_lines_1.DiffType.ADDED) {\n                content = this.renderLine(null, right.type, LineNumberPrefix.RIGHT, right.value, right.lineNumber);\n            }\n            return ((0, jsx_runtime_1.jsx)(\"tr\", { className: this.styles.line, children: content }, index));\n        };\n        /**\n         * Returns a function with clicked block number in the closure.\n         *\n         * @param id Cold fold block id.\n         */\n        this.onBlockClickProxy = (id) => () => this.onBlockExpand(id);\n        /**\n         * Generates cold fold block. It also uses the custom message renderer when available to show\n         * cold fold messages.\n         *\n         * @param num Number of skipped lines between two blocks.\n         * @param blockNumber Code fold block id.\n         * @param leftBlockLineNumber First left line number after the current code fold block.\n         * @param rightBlockLineNumber First right line number after the current code fold block.\n         */\n        this.renderSkippedLineIndicator = (num, blockNumber, leftBlockLineNumber, rightBlockLineNumber) => {\n            const { hideLineNumbers, splitView } = this.props;\n            const message = this.props.codeFoldMessageRenderer ? (this.props.codeFoldMessageRenderer(num, leftBlockLineNumber, rightBlockLineNumber)) : ((0, jsx_runtime_1.jsxs)(\"pre\", { className: this.styles.codeFoldContent, children: [\"Expand \", num, \" lines ...\"] }));\n            const content = ((0, jsx_runtime_1.jsx)(\"td\", { children: (0, jsx_runtime_1.jsx)(\"a\", { onClick: this.onBlockClickProxy(blockNumber), tabIndex: 0, children: message }) }));\n            const isUnifiedViewWithoutLineNumbers = !splitView && !hideLineNumbers;\n            return ((0, jsx_runtime_1.jsxs)(\"tr\", { className: this.styles.codeFold, children: [!hideLineNumbers && (0, jsx_runtime_1.jsx)(\"td\", { className: this.styles.codeFoldGutter }), this.props.renderGutter ? ((0, jsx_runtime_1.jsx)(\"td\", { className: this.styles.codeFoldGutter })) : null, (0, jsx_runtime_1.jsx)(\"td\", { className: (0, classnames_1.default)({\n                            [this.styles.codeFoldGutter]: isUnifiedViewWithoutLineNumbers,\n                        }) }), isUnifiedViewWithoutLineNumbers ? ((0, jsx_runtime_1.jsxs)(React.Fragment, { children: [(0, jsx_runtime_1.jsx)(\"td\", {}), content] })) : ((0, jsx_runtime_1.jsxs)(React.Fragment, { children: [content, this.props.renderGutter ? (0, jsx_runtime_1.jsx)(\"td\", {}) : null, (0, jsx_runtime_1.jsx)(\"td\", {})] })), (0, jsx_runtime_1.jsx)(\"td\", {}), (0, jsx_runtime_1.jsx)(\"td\", {})] }, `${leftBlockLineNumber}-${rightBlockLineNumber}`));\n        };\n        /**\n         * Generates the entire diff view.\n         */\n        this.renderDiff = () => {\n            const { oldValue, newValue, splitView, disableWordDiff, compareMethod, linesOffset, } = this.props;\n            const { lineInformation, diffLines } = (0, compute_lines_1.computeLineInformation)(oldValue, newValue, disableWordDiff, compareMethod, linesOffset, this.props.alwaysShowLines);\n            const extraLines = this.props.extraLinesSurroundingDiff < 0\n                ? 0\n                : Math.round(this.props.extraLinesSurroundingDiff);\n            const { lineBlocks, blocks } = (0, compute_hidden_blocks_1.computeHiddenBlocks)(lineInformation, diffLines, extraLines);\n            return lineInformation.map((line, lineIndex) => {\n                if (this.props.showDiffOnly) {\n                    const blockIndex = lineBlocks[lineIndex];\n                    if (blockIndex !== undefined) {\n                        const lastLineOfBlock = blocks[blockIndex].endLine === lineIndex;\n                        if (!this.state.expandedBlocks.includes(blockIndex) && lastLineOfBlock) {\n                            return ((0, jsx_runtime_1.jsx)(React.Fragment, { children: this.renderSkippedLineIndicator(blocks[blockIndex].lines, blockIndex, line.left.lineNumber, line.right.lineNumber) }, lineIndex));\n                        }\n                        else if (!this.state.expandedBlocks.includes(blockIndex)) {\n                            return null;\n                        }\n                    }\n                }\n                const diffNodes = splitView\n                    ? this.renderSplitView(line, lineIndex)\n                    : this.renderInlineView(line, lineIndex);\n                return diffNodes;\n            });\n        };\n        this.render = () => {\n            const { oldValue, newValue, useDarkTheme, leftTitle, rightTitle, splitView, hideLineNumbers, hideMarkers, nonce, } = this.props;\n            if (this.props.compareMethod !== compute_lines_1.DiffMethod.JSON) {\n                if (typeof oldValue !== 'string' || typeof newValue !== 'string') {\n                    throw Error('\"oldValue\" and \"newValue\" should be strings');\n                }\n            }\n            this.styles = this.computeStyles(this.props.styles, useDarkTheme, nonce);\n            const nodes = this.renderDiff();\n            let colSpanOnSplitView = hideLineNumbers ? 2 : 3;\n            let colSpanOnInlineView = hideLineNumbers ? 2 : 4;\n            if (hideMarkers) {\n                colSpanOnSplitView -= 1;\n                colSpanOnInlineView -= 1;\n            }\n            const columnExtension = this.props.renderGutter ? 1 : 0;\n            const title = (leftTitle || rightTitle) && ((0, jsx_runtime_1.jsxs)(\"tr\", { children: [(0, jsx_runtime_1.jsx)(\"td\", { colSpan: (splitView ? colSpanOnSplitView : colSpanOnInlineView) +\n                            columnExtension, className: this.styles.titleBlock, children: (0, jsx_runtime_1.jsx)(\"pre\", { className: this.styles.contentText, children: leftTitle }) }), splitView && ((0, jsx_runtime_1.jsx)(\"td\", { colSpan: colSpanOnSplitView + columnExtension, className: this.styles.titleBlock, children: (0, jsx_runtime_1.jsx)(\"pre\", { className: this.styles.contentText, children: rightTitle }) }))] }));\n            return ((0, jsx_runtime_1.jsx)(\"table\", { className: (0, classnames_1.default)(this.styles.diffContainer, {\n                    [this.styles.splitView]: splitView,\n                }), children: (0, jsx_runtime_1.jsxs)(\"tbody\", { children: [title, nodes] }) }));\n        };\n        this.state = {\n            expandedBlocks: [],\n        };\n    }\n}\nDiffViewer.defaultProps = {\n    oldValue: '',\n    newValue: '',\n    splitView: true,\n    highlightLines: [],\n    disableWordDiff: false,\n    compareMethod: compute_lines_1.DiffMethod.CHARS,\n    styles: {},\n    hideLineNumbers: false,\n    hideMarkers: false,\n    extraLinesSurroundingDiff: 3,\n    showDiffOnly: true,\n    useDarkTheme: false,\n    linesOffset: 0,\n    nonce: '',\n};\nexports[\"default\"] = DiffViewer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGlmZi12aWV3ZXItY29udGludWVkL2xpYi9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDBDQUEwQyw0QkFBNEI7QUFDdEUsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCLEdBQUcsd0JBQXdCO0FBQzdDLHNCQUFzQixtQkFBTyxDQUFDLGdJQUFtQjtBQUNqRCwyQkFBMkIsbUJBQU8sQ0FBQyx3R0FBTztBQUMxQyxxQ0FBcUMsbUJBQU8sQ0FBQyw0REFBWTtBQUN6RCx3QkFBd0IsbUJBQU8sQ0FBQyxrR0FBaUI7QUFDakQsOENBQTZDLEVBQUUscUNBQXFDLHNDQUFzQyxFQUFDO0FBQzNILGlDQUFpQyxtQkFBTyxDQUFDLG9GQUFVO0FBQ25ELGdDQUFnQyxtQkFBTyxDQUFDLGtIQUF5QjtBQUNqRSxVQUFVLG1CQUFPLENBQUMsNkVBQWE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsdUJBQXVCLHdCQUF3Qix3QkFBd0I7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RDtBQUNBO0FBQ0EscUJBQXFCLG1FQUFtRTtBQUN4RixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLE9BQU8sR0FBRyxXQUFXO0FBQy9ELG9EQUFvRCxpQkFBaUIsR0FBRyxxQkFBcUI7QUFDN0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThELDBFQUEwRTtBQUN4STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLDZDQUE2Qyx5REFBeUQsR0FBRyw0RkFBNEY7QUFDOU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLDZDQUE2QyxtRUFBbUUsR0FBRztBQUM1STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLDJGQUEyRjtBQUMzRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLDhDQUE4QywwQ0FBMEMsR0FBRyxtQ0FBbUM7QUFDdko7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qiw2Q0FBNkMsdURBQXVELEdBQUcsSUFBSTtBQUNwSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsYUFBYTtBQUMvQyxvREFBb0QsNk1BQTZNO0FBQ2pRO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxhQUFhO0FBQ2hEO0FBQ0E7QUFDQSxrRUFBa0UsMENBQTBDLDZIQUE2SCxrQ0FBa0MsaUlBQWlJLElBQUk7QUFDaFo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsZ0RBQWdEO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsNkJBQTZCO0FBQ2pELDBMQUEwTCxrRkFBa0Y7QUFDNVEsNERBQTRELHdDQUF3Qyw4RUFBOEUsR0FBRztBQUNyTDtBQUNBLG9EQUFvRCwrRkFBK0YsdUNBQXVDLDZEQUE2RCx1Q0FBdUMsMENBQTBDO0FBQ3hVO0FBQ0EseUJBQXlCLEdBQUcsZ0ZBQWdGLDBDQUEwQyxhQUFhLGdEQUFnRCw2RUFBNkUseUNBQXlDLElBQUksbUNBQW1DLGtDQUFrQyxJQUFJLEtBQUssb0JBQW9CLEdBQUcscUJBQXFCO0FBQ3ZjO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsOEVBQThFO0FBQ2xHLG9CQUFvQiw2QkFBNkI7QUFDakQ7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHFCQUFxQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2RUFBNkUsOEhBQThIO0FBQzNNO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxvQkFBb0IsMkdBQTJHO0FBQy9IO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RkFBd0YsMENBQTBDO0FBQ2xJLDBIQUEwSCx5REFBeUQsR0FBRyxnREFBZ0QsNEhBQTRILDBEQUEwRCxHQUFHLEtBQUs7QUFDcGEsc0RBQXNEO0FBQ3REO0FBQ0EsaUJBQWlCLGdEQUFnRCwwQkFBMEIsR0FBRztBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aXRlLXJlYWN0LXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9yZWFjdC1kaWZmLXZpZXdlci1jb250aW51ZWQvbGliL3NyYy9pbmRleC5qcz81N2Q4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRpZmZNZXRob2QgPSBleHBvcnRzLkxpbmVOdW1iZXJQcmVmaXggPSB2b2lkIDA7XG5jb25zdCBqc3hfcnVudGltZV8xID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xuY29uc3QgUmVhY3QgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcInJlYWN0XCIpKTtcbmNvbnN0IGNsYXNzbmFtZXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5jb25zdCBjb21wdXRlX2xpbmVzXzEgPSByZXF1aXJlKFwiLi9jb21wdXRlLWxpbmVzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGlmZk1ldGhvZFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29tcHV0ZV9saW5lc18xLkRpZmZNZXRob2Q7IH0gfSk7XG5jb25zdCBzdHlsZXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9zdHlsZXNcIikpO1xuY29uc3QgY29tcHV0ZV9oaWRkZW5fYmxvY2tzXzEgPSByZXF1aXJlKFwiLi9jb21wdXRlLWhpZGRlbi1ibG9ja3NcIik7XG5jb25zdCBtID0gcmVxdWlyZSgnbWVtb2l6ZS1vbmUnKTtcbmNvbnN0IG1lbW9pemUgPSBtLmRlZmF1bHQgfHwgbTtcbnZhciBMaW5lTnVtYmVyUHJlZml4O1xuKGZ1bmN0aW9uIChMaW5lTnVtYmVyUHJlZml4KSB7XG4gICAgTGluZU51bWJlclByZWZpeFtcIkxFRlRcIl0gPSBcIkxcIjtcbiAgICBMaW5lTnVtYmVyUHJlZml4W1wiUklHSFRcIl0gPSBcIlJcIjtcbn0pKExpbmVOdW1iZXJQcmVmaXggfHwgKGV4cG9ydHMuTGluZU51bWJlclByZWZpeCA9IExpbmVOdW1iZXJQcmVmaXggPSB7fSkpO1xuY2xhc3MgRGlmZlZpZXdlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVzZXRzIGNvZGUgYmxvY2sgZXhwYW5kIHRvIHRoZSBpbml0aWFsIHN0YWdlLiBXaWxsIGJlIGV4cG9zZWQgdG8gdGhlIHBhcmVudCBjb21wb25lbnQgdmlhXG4gICAgICAgICAqIHJlZnMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJlc2V0Q29kZUJsb2NrcyA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlLmV4cGFuZGVkQmxvY2tzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgZXhwYW5kZWRCbG9ja3M6IFtdLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUHVzaGVzIHRoZSB0YXJnZXQgZXhwYW5kZWQgY29kZSBibG9jayB0byB0aGUgc3RhdGUuIER1cmluZyB0aGUgcmUtcmVuZGVyLFxuICAgICAgICAgKiB0aGlzIHZhbHVlIGlzIHVzZWQgdG8gZXhwYW5kL2ZvbGQgdW5tb2RpZmllZCBjb2RlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vbkJsb2NrRXhwYW5kID0gKGlkKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwcmV2U3RhdGUgPSB0aGlzLnN0YXRlLmV4cGFuZGVkQmxvY2tzLnNsaWNlKCk7XG4gICAgICAgICAgICBwcmV2U3RhdGUucHVzaChpZCk7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBleHBhbmRlZEJsb2NrczogcHJldlN0YXRlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb21wdXRlcyBmaW5hbCBzdHlsZXMgZm9yIHRoZSBkaWZmIHZpZXdlci4gSXQgY29tYmluZXMgdGhlIGRlZmF1bHQgc3R5bGVzIHdpdGggdGhlIHVzZXJcbiAgICAgICAgICogc3VwcGxpZWQgb3ZlcnJpZGVzLiBUaGUgY29tcHV0ZWQgc3R5bGVzIGFyZSBjYWNoZWQgd2l0aCBwZXJmb3JtYW5jZSBpbiBtaW5kLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gc3R5bGVzIFVzZXIgc3VwcGxpZWQgc3R5bGUgb3ZlcnJpZGVzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jb21wdXRlU3R5bGVzID0gbWVtb2l6ZShzdHlsZXNfMS5kZWZhdWx0KTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgYSBmdW5jdGlvbiB3aXRoIGNsaWNrZWQgbGluZSBudW1iZXIgaW4gdGhlIGNsb3N1cmUuIFJldHVybnMgYW4gbm8tb3AgZnVuY3Rpb24gd2hlbiBub1xuICAgICAgICAgKiBvbkxpbmVOdW1iZXJDbGljayBoYW5kbGVyIGlzIHN1cHBsaWVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gaWQgTGluZSBpZCBvZiBhIGxpbmUuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9uTGluZU51bWJlckNsaWNrUHJveHkgPSAoaWQpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLm9uTGluZU51bWJlckNsaWNrKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChlKSA9PiB0aGlzLnByb3BzLm9uTGluZU51bWJlckNsaWNrKGlkLCBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7IH07XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNYXBzIG92ZXIgdGhlIHdvcmQgZGlmZiBhbmQgY29uc3RydWN0cyB0aGUgcmVxdWlyZWQgUmVhY3QgZWxlbWVudHMgdG8gc2hvdyB3b3JkIGRpZmYuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBkaWZmQXJyYXkgV29yZCBkaWZmIGluZm9ybWF0aW9uIGRlcml2ZWQgZnJvbSBsaW5lIGluZm9ybWF0aW9uLlxuICAgICAgICAgKiBAcGFyYW0gcmVuZGVyZXIgT3B0aW9uYWwgcmVuZGVyZXIgdG8gZm9ybWF0IGRpZmYgd29yZHMuIFVzZWZ1bCBmb3Igc3ludGF4IGhpZ2hsaWdodGluZy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVuZGVyV29yZERpZmYgPSAoZGlmZkFycmF5LCByZW5kZXJlcikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGRpZmZBcnJheS5tYXAoKHdvcmREaWZmLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgoMCwganN4X3J1bnRpbWVfMS5qc3gpKFwic3BhblwiLCB7IGNsYXNzTmFtZTogKDAsIGNsYXNzbmFtZXNfMS5kZWZhdWx0KSh0aGlzLnN0eWxlcy53b3JkRGlmZiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgW3RoaXMuc3R5bGVzLndvcmRBZGRlZF06IHdvcmREaWZmLnR5cGUgPT09IGNvbXB1dGVfbGluZXNfMS5EaWZmVHlwZS5BRERFRCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFt0aGlzLnN0eWxlcy53b3JkUmVtb3ZlZF06IHdvcmREaWZmLnR5cGUgPT09IGNvbXB1dGVfbGluZXNfMS5EaWZmVHlwZS5SRU1PVkVELFxuICAgICAgICAgICAgICAgICAgICB9KSwgY2hpbGRyZW46IHJlbmRlcmVyID8gcmVuZGVyZXIod29yZERpZmYudmFsdWUpIDogd29yZERpZmYudmFsdWUgfSwgaSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNYXBzIG92ZXIgdGhlIGxpbmUgZGlmZiBhbmQgY29uc3RydWN0cyB0aGUgcmVxdWlyZWQgcmVhY3QgZWxlbWVudHMgdG8gc2hvdyBsaW5lIGRpZmYuIEl0IGNhbGxzXG4gICAgICAgICAqIHJlbmRlcldvcmREaWZmIHdoZW4gZW5jb3VudGVyaW5nIHdvcmQgZGlmZi4gVGhpcyB0YWtlcyBjYXJlIG9mIGJvdGggaW5saW5lIGFuZCBzcGxpdCB2aWV3IGxpbmVcbiAgICAgICAgICogcmVuZGVycy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIGxpbmVOdW1iZXIgTGluZSBudW1iZXIgb2YgdGhlIGN1cnJlbnQgbGluZS5cbiAgICAgICAgICogQHBhcmFtIHR5cGUgVHlwZSBvZiBkaWZmIG9mIHRoZSBjdXJyZW50IGxpbmUuXG4gICAgICAgICAqIEBwYXJhbSBwcmVmaXggVW5pcXVlIGlkIHRvIHByZWZpeCB3aXRoIHRoZSBsaW5lIG51bWJlcnMuXG4gICAgICAgICAqIEBwYXJhbSB2YWx1ZSBDb250ZW50IG9mIHRoZSBsaW5lLiBJdCBjYW4gYmUgYSBzdHJpbmcgb3IgYSB3b3JkIGRpZmYgYXJyYXkuXG4gICAgICAgICAqIEBwYXJhbSBhZGRpdGlvbmFsTGluZU51bWJlciBBZGRpdGlvbmFsIGxpbmUgbnVtYmVyIHRvIGJlIHNob3duLiBVc2VmdWwgZm9yIHJlbmRlcmluZyBpbmxpbmVcbiAgICAgICAgICogIGRpZmYgdmlldy4gUmlnaHQgbGluZSBudW1iZXIgd2lsbCBiZSBwYXNzZWQgYXMgYWRkaXRpb25hbExpbmVOdW1iZXIuXG4gICAgICAgICAqIEBwYXJhbSBhZGRpdGlvbmFsUHJlZml4IFNpbWlsYXIgdG8gcHJlZml4IGJ1dCBmb3IgYWRkaXRpb25hbCBsaW5lIG51bWJlci5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVuZGVyTGluZSA9IChsaW5lTnVtYmVyLCB0eXBlLCBwcmVmaXgsIHZhbHVlLCBhZGRpdGlvbmFsTGluZU51bWJlciwgYWRkaXRpb25hbFByZWZpeCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbGluZU51bWJlclRlbXBsYXRlID0gYCR7cHJlZml4fS0ke2xpbmVOdW1iZXJ9YDtcbiAgICAgICAgICAgIGNvbnN0IGFkZGl0aW9uYWxMaW5lTnVtYmVyVGVtcGxhdGUgPSBgJHthZGRpdGlvbmFsUHJlZml4fS0ke2FkZGl0aW9uYWxMaW5lTnVtYmVyfWA7XG4gICAgICAgICAgICBjb25zdCBoaWdobGlnaHRMaW5lID0gdGhpcy5wcm9wcy5oaWdobGlnaHRMaW5lcy5pbmNsdWRlcyhsaW5lTnVtYmVyVGVtcGxhdGUpIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5oaWdobGlnaHRMaW5lcy5pbmNsdWRlcyhhZGRpdGlvbmFsTGluZU51bWJlclRlbXBsYXRlKTtcbiAgICAgICAgICAgIGNvbnN0IGFkZGVkID0gdHlwZSA9PT0gY29tcHV0ZV9saW5lc18xLkRpZmZUeXBlLkFEREVEO1xuICAgICAgICAgICAgY29uc3QgcmVtb3ZlZCA9IHR5cGUgPT09IGNvbXB1dGVfbGluZXNfMS5EaWZmVHlwZS5SRU1PVkVEO1xuICAgICAgICAgICAgY29uc3QgY2hhbmdlZCA9IHR5cGUgPT09IGNvbXB1dGVfbGluZXNfMS5EaWZmVHlwZS5DSEFOR0VEO1xuICAgICAgICAgICAgbGV0IGNvbnRlbnQ7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50ID0gdGhpcy5yZW5kZXJXb3JkRGlmZih2YWx1ZSwgdGhpcy5wcm9wcy5yZW5kZXJDb250ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMucHJvcHMucmVuZGVyQ29udGVudCkge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSB0aGlzLnByb3BzLnJlbmRlckNvbnRlbnQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29udGVudCA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICgoMCwganN4X3J1bnRpbWVfMS5qc3hzKShSZWFjdC5GcmFnbWVudCwgeyBjaGlsZHJlbjogWyF0aGlzLnByb3BzLmhpZGVMaW5lTnVtYmVycyAmJiAoKDAsIGpzeF9ydW50aW1lXzEuanN4KShcInRkXCIsIHsgb25DbGljazogbGluZU51bWJlciAmJiB0aGlzLm9uTGluZU51bWJlckNsaWNrUHJveHkobGluZU51bWJlclRlbXBsYXRlKSwgY2xhc3NOYW1lOiAoMCwgY2xhc3NuYW1lc18xLmRlZmF1bHQpKHRoaXMuc3R5bGVzLmd1dHRlciwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt0aGlzLnN0eWxlcy5lbXB0eUd1dHRlcl06ICFsaW5lTnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt0aGlzLnN0eWxlcy5kaWZmQWRkZWRdOiBhZGRlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbdGhpcy5zdHlsZXMuZGlmZlJlbW92ZWRdOiByZW1vdmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt0aGlzLnN0eWxlcy5kaWZmQ2hhbmdlZF06IGNoYW5nZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW3RoaXMuc3R5bGVzLmhpZ2hsaWdodGVkR3V0dGVyXTogaGlnaGxpZ2h0TGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBjaGlsZHJlbjogKDAsIGpzeF9ydW50aW1lXzEuanN4KShcInByZVwiLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZXMubGluZU51bWJlciwgY2hpbGRyZW46IGxpbmVOdW1iZXIgfSkgfSkpLCAhdGhpcy5wcm9wcy5zcGxpdFZpZXcgJiYgIXRoaXMucHJvcHMuaGlkZUxpbmVOdW1iZXJzICYmICgoMCwganN4X3J1bnRpbWVfMS5qc3gpKFwidGRcIiwgeyBvbkNsaWNrOiBhZGRpdGlvbmFsTGluZU51bWJlciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25MaW5lTnVtYmVyQ2xpY2tQcm94eShhZGRpdGlvbmFsTGluZU51bWJlclRlbXBsYXRlKSwgY2xhc3NOYW1lOiAoMCwgY2xhc3NuYW1lc18xLmRlZmF1bHQpKHRoaXMuc3R5bGVzLmd1dHRlciwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt0aGlzLnN0eWxlcy5lbXB0eUd1dHRlcl06ICFhZGRpdGlvbmFsTGluZU51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbdGhpcy5zdHlsZXMuZGlmZkFkZGVkXTogYWRkZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW3RoaXMuc3R5bGVzLmRpZmZSZW1vdmVkXTogcmVtb3ZlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbdGhpcy5zdHlsZXMuZGlmZkNoYW5nZWRdOiBjaGFuZ2VkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt0aGlzLnN0eWxlcy5oaWdobGlnaHRlZEd1dHRlcl06IGhpZ2hsaWdodExpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSwgY2hpbGRyZW46ICgwLCBqc3hfcnVudGltZV8xLmpzeCkoXCJwcmVcIiwgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGVzLmxpbmVOdW1iZXIsIGNoaWxkcmVuOiBhZGRpdGlvbmFsTGluZU51bWJlciB9KSB9KSksIHRoaXMucHJvcHMucmVuZGVyR3V0dGVyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMucHJvcHMucmVuZGVyR3V0dGVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlZml4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxMaW5lTnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxQcmVmaXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVzOiB0aGlzLnN0eWxlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG51bGwsICF0aGlzLnByb3BzLmhpZGVNYXJrZXJzICYmICgoMCwganN4X3J1bnRpbWVfMS5qc3gpKFwidGRcIiwgeyBjbGFzc05hbWU6ICgwLCBjbGFzc25hbWVzXzEuZGVmYXVsdCkodGhpcy5zdHlsZXMubWFya2VyLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW3RoaXMuc3R5bGVzLmVtcHR5TGluZV06ICFjb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt0aGlzLnN0eWxlcy5kaWZmQWRkZWRdOiBhZGRlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbdGhpcy5zdHlsZXMuZGlmZlJlbW92ZWRdOiByZW1vdmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt0aGlzLnN0eWxlcy5kaWZmQ2hhbmdlZF06IGNoYW5nZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW3RoaXMuc3R5bGVzLmhpZ2hsaWdodGVkTGluZV06IGhpZ2hsaWdodExpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSwgY2hpbGRyZW46ICgwLCBqc3hfcnVudGltZV8xLmpzeHMpKFwicHJlXCIsIHsgY2hpbGRyZW46IFthZGRlZCAmJiAnKycsIHJlbW92ZWQgJiYgJy0nXSB9KSB9KSksICgwLCBqc3hfcnVudGltZV8xLmpzeCkoXCJ0ZFwiLCB7IGNsYXNzTmFtZTogKDAsIGNsYXNzbmFtZXNfMS5kZWZhdWx0KSh0aGlzLnN0eWxlcy5jb250ZW50LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW3RoaXMuc3R5bGVzLmVtcHR5TGluZV06ICFjb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt0aGlzLnN0eWxlcy5kaWZmQWRkZWRdOiBhZGRlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbdGhpcy5zdHlsZXMuZGlmZlJlbW92ZWRdOiByZW1vdmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt0aGlzLnN0eWxlcy5kaWZmQ2hhbmdlZF06IGNoYW5nZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW3RoaXMuc3R5bGVzLmhpZ2hsaWdodGVkTGluZV06IGhpZ2hsaWdodExpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSwgY2hpbGRyZW46ICgwLCBqc3hfcnVudGltZV8xLmpzeCkoXCJwcmVcIiwgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGVzLmNvbnRlbnRUZXh0LCBjaGlsZHJlbjogY29udGVudCB9KSB9KV0gfSkpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogR2VuZXJhdGVzIGxpbmVzIGZvciBzcGxpdCB2aWV3LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gb2JqIExpbmUgZGlmZiBpbmZvcm1hdGlvbi5cbiAgICAgICAgICogQHBhcmFtIG9iai5sZWZ0IExpZmUgZGlmZiBpbmZvcm1hdGlvbiBmb3IgdGhlIGxlZnQgcGFuZSBvZiB0aGUgc3BsaXQgdmlldy5cbiAgICAgICAgICogQHBhcmFtIG9iai5yaWdodCBMaWZlIGRpZmYgaW5mb3JtYXRpb24gZm9yIHRoZSByaWdodCBwYW5lIG9mIHRoZSBzcGxpdCB2aWV3LlxuICAgICAgICAgKiBAcGFyYW0gaW5kZXggUmVhY3Qga2V5IGZvciB0aGUgbGluZXMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJlbmRlclNwbGl0VmlldyA9ICh7IGxlZnQsIHJpZ2h0IH0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKCgwLCBqc3hfcnVudGltZV8xLmpzeHMpKFwidHJcIiwgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGVzLmxpbmUsIGNoaWxkcmVuOiBbdGhpcy5yZW5kZXJMaW5lKGxlZnQubGluZU51bWJlciwgbGVmdC50eXBlLCBMaW5lTnVtYmVyUHJlZml4LkxFRlQsIGxlZnQudmFsdWUpLCB0aGlzLnJlbmRlckxpbmUocmlnaHQubGluZU51bWJlciwgcmlnaHQudHlwZSwgTGluZU51bWJlclByZWZpeC5SSUdIVCwgcmlnaHQudmFsdWUpXSB9LCBpbmRleCkpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogR2VuZXJhdGVzIGxpbmVzIGZvciBpbmxpbmUgdmlldy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIG9iaiBMaW5lIGRpZmYgaW5mb3JtYXRpb24uXG4gICAgICAgICAqIEBwYXJhbSBvYmoubGVmdCBMaWZlIGRpZmYgaW5mb3JtYXRpb24gZm9yIHRoZSBhZGRlZCBzZWN0aW9uIG9mIHRoZSBpbmxpbmUgdmlldy5cbiAgICAgICAgICogQHBhcmFtIG9iai5yaWdodCBMaWZlIGRpZmYgaW5mb3JtYXRpb24gZm9yIHRoZSByZW1vdmVkIHNlY3Rpb24gb2YgdGhlIGlubGluZSB2aWV3LlxuICAgICAgICAgKiBAcGFyYW0gaW5kZXggUmVhY3Qga2V5IGZvciB0aGUgbGluZXMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJlbmRlcklubGluZVZpZXcgPSAoeyBsZWZ0LCByaWdodCB9LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgbGV0IGNvbnRlbnQ7XG4gICAgICAgICAgICBpZiAobGVmdC50eXBlID09PSBjb21wdXRlX2xpbmVzXzEuRGlmZlR5cGUuUkVNT1ZFRCAmJiByaWdodC50eXBlID09PSBjb21wdXRlX2xpbmVzXzEuRGlmZlR5cGUuQURERUQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKCgwLCBqc3hfcnVudGltZV8xLmpzeHMpKFJlYWN0LkZyYWdtZW50LCB7IGNoaWxkcmVuOiBbKDAsIGpzeF9ydW50aW1lXzEuanN4KShcInRyXCIsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlcy5saW5lLCBjaGlsZHJlbjogdGhpcy5yZW5kZXJMaW5lKGxlZnQubGluZU51bWJlciwgbGVmdC50eXBlLCBMaW5lTnVtYmVyUHJlZml4LkxFRlQsIGxlZnQudmFsdWUsIG51bGwpIH0pLCAoMCwganN4X3J1bnRpbWVfMS5qc3gpKFwidHJcIiwgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGVzLmxpbmUsIGNoaWxkcmVuOiB0aGlzLnJlbmRlckxpbmUobnVsbCwgcmlnaHQudHlwZSwgTGluZU51bWJlclByZWZpeC5SSUdIVCwgcmlnaHQudmFsdWUsIHJpZ2h0LmxpbmVOdW1iZXIpIH0pXSB9LCBpbmRleCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxlZnQudHlwZSA9PT0gY29tcHV0ZV9saW5lc18xLkRpZmZUeXBlLlJFTU9WRUQpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50ID0gdGhpcy5yZW5kZXJMaW5lKGxlZnQubGluZU51bWJlciwgbGVmdC50eXBlLCBMaW5lTnVtYmVyUHJlZml4LkxFRlQsIGxlZnQudmFsdWUsIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxlZnQudHlwZSA9PT0gY29tcHV0ZV9saW5lc18xLkRpZmZUeXBlLkRFRkFVTFQpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50ID0gdGhpcy5yZW5kZXJMaW5lKGxlZnQubGluZU51bWJlciwgbGVmdC50eXBlLCBMaW5lTnVtYmVyUHJlZml4LkxFRlQsIGxlZnQudmFsdWUsIHJpZ2h0LmxpbmVOdW1iZXIsIExpbmVOdW1iZXJQcmVmaXguUklHSFQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJpZ2h0LnR5cGUgPT09IGNvbXB1dGVfbGluZXNfMS5EaWZmVHlwZS5BRERFRCkge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSB0aGlzLnJlbmRlckxpbmUobnVsbCwgcmlnaHQudHlwZSwgTGluZU51bWJlclByZWZpeC5SSUdIVCwgcmlnaHQudmFsdWUsIHJpZ2h0LmxpbmVOdW1iZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICgoMCwganN4X3J1bnRpbWVfMS5qc3gpKFwidHJcIiwgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGVzLmxpbmUsIGNoaWxkcmVuOiBjb250ZW50IH0sIGluZGV4KSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIGEgZnVuY3Rpb24gd2l0aCBjbGlja2VkIGJsb2NrIG51bWJlciBpbiB0aGUgY2xvc3VyZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIGlkIENvbGQgZm9sZCBibG9jayBpZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub25CbG9ja0NsaWNrUHJveHkgPSAoaWQpID0+ICgpID0+IHRoaXMub25CbG9ja0V4cGFuZChpZCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZW5lcmF0ZXMgY29sZCBmb2xkIGJsb2NrLiBJdCBhbHNvIHVzZXMgdGhlIGN1c3RvbSBtZXNzYWdlIHJlbmRlcmVyIHdoZW4gYXZhaWxhYmxlIHRvIHNob3dcbiAgICAgICAgICogY29sZCBmb2xkIG1lc3NhZ2VzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gbnVtIE51bWJlciBvZiBza2lwcGVkIGxpbmVzIGJldHdlZW4gdHdvIGJsb2Nrcy5cbiAgICAgICAgICogQHBhcmFtIGJsb2NrTnVtYmVyIENvZGUgZm9sZCBibG9jayBpZC5cbiAgICAgICAgICogQHBhcmFtIGxlZnRCbG9ja0xpbmVOdW1iZXIgRmlyc3QgbGVmdCBsaW5lIG51bWJlciBhZnRlciB0aGUgY3VycmVudCBjb2RlIGZvbGQgYmxvY2suXG4gICAgICAgICAqIEBwYXJhbSByaWdodEJsb2NrTGluZU51bWJlciBGaXJzdCByaWdodCBsaW5lIG51bWJlciBhZnRlciB0aGUgY3VycmVudCBjb2RlIGZvbGQgYmxvY2suXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJlbmRlclNraXBwZWRMaW5lSW5kaWNhdG9yID0gKG51bSwgYmxvY2tOdW1iZXIsIGxlZnRCbG9ja0xpbmVOdW1iZXIsIHJpZ2h0QmxvY2tMaW5lTnVtYmVyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGhpZGVMaW5lTnVtYmVycywgc3BsaXRWaWV3IH0gPSB0aGlzLnByb3BzO1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IHRoaXMucHJvcHMuY29kZUZvbGRNZXNzYWdlUmVuZGVyZXIgPyAodGhpcy5wcm9wcy5jb2RlRm9sZE1lc3NhZ2VSZW5kZXJlcihudW0sIGxlZnRCbG9ja0xpbmVOdW1iZXIsIHJpZ2h0QmxvY2tMaW5lTnVtYmVyKSkgOiAoKDAsIGpzeF9ydW50aW1lXzEuanN4cykoXCJwcmVcIiwgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGVzLmNvZGVGb2xkQ29udGVudCwgY2hpbGRyZW46IFtcIkV4cGFuZCBcIiwgbnVtLCBcIiBsaW5lcyAuLi5cIl0gfSkpO1xuICAgICAgICAgICAgY29uc3QgY29udGVudCA9ICgoMCwganN4X3J1bnRpbWVfMS5qc3gpKFwidGRcIiwgeyBjaGlsZHJlbjogKDAsIGpzeF9ydW50aW1lXzEuanN4KShcImFcIiwgeyBvbkNsaWNrOiB0aGlzLm9uQmxvY2tDbGlja1Byb3h5KGJsb2NrTnVtYmVyKSwgdGFiSW5kZXg6IDAsIGNoaWxkcmVuOiBtZXNzYWdlIH0pIH0pKTtcbiAgICAgICAgICAgIGNvbnN0IGlzVW5pZmllZFZpZXdXaXRob3V0TGluZU51bWJlcnMgPSAhc3BsaXRWaWV3ICYmICFoaWRlTGluZU51bWJlcnM7XG4gICAgICAgICAgICByZXR1cm4gKCgwLCBqc3hfcnVudGltZV8xLmpzeHMpKFwidHJcIiwgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGVzLmNvZGVGb2xkLCBjaGlsZHJlbjogWyFoaWRlTGluZU51bWJlcnMgJiYgKDAsIGpzeF9ydW50aW1lXzEuanN4KShcInRkXCIsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlcy5jb2RlRm9sZEd1dHRlciB9KSwgdGhpcy5wcm9wcy5yZW5kZXJHdXR0ZXIgPyAoKDAsIGpzeF9ydW50aW1lXzEuanN4KShcInRkXCIsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlcy5jb2RlRm9sZEd1dHRlciB9KSkgOiBudWxsLCAoMCwganN4X3J1bnRpbWVfMS5qc3gpKFwidGRcIiwgeyBjbGFzc05hbWU6ICgwLCBjbGFzc25hbWVzXzEuZGVmYXVsdCkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt0aGlzLnN0eWxlcy5jb2RlRm9sZEd1dHRlcl06IGlzVW5pZmllZFZpZXdXaXRob3V0TGluZU51bWJlcnMsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSB9KSwgaXNVbmlmaWVkVmlld1dpdGhvdXRMaW5lTnVtYmVycyA/ICgoMCwganN4X3J1bnRpbWVfMS5qc3hzKShSZWFjdC5GcmFnbWVudCwgeyBjaGlsZHJlbjogWygwLCBqc3hfcnVudGltZV8xLmpzeCkoXCJ0ZFwiLCB7fSksIGNvbnRlbnRdIH0pKSA6ICgoMCwganN4X3J1bnRpbWVfMS5qc3hzKShSZWFjdC5GcmFnbWVudCwgeyBjaGlsZHJlbjogW2NvbnRlbnQsIHRoaXMucHJvcHMucmVuZGVyR3V0dGVyID8gKDAsIGpzeF9ydW50aW1lXzEuanN4KShcInRkXCIsIHt9KSA6IG51bGwsICgwLCBqc3hfcnVudGltZV8xLmpzeCkoXCJ0ZFwiLCB7fSldIH0pKSwgKDAsIGpzeF9ydW50aW1lXzEuanN4KShcInRkXCIsIHt9KSwgKDAsIGpzeF9ydW50aW1lXzEuanN4KShcInRkXCIsIHt9KV0gfSwgYCR7bGVmdEJsb2NrTGluZU51bWJlcn0tJHtyaWdodEJsb2NrTGluZU51bWJlcn1gKSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZW5lcmF0ZXMgdGhlIGVudGlyZSBkaWZmIHZpZXcuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJlbmRlckRpZmYgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IG9sZFZhbHVlLCBuZXdWYWx1ZSwgc3BsaXRWaWV3LCBkaXNhYmxlV29yZERpZmYsIGNvbXBhcmVNZXRob2QsIGxpbmVzT2Zmc2V0LCB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgICAgIGNvbnN0IHsgbGluZUluZm9ybWF0aW9uLCBkaWZmTGluZXMgfSA9ICgwLCBjb21wdXRlX2xpbmVzXzEuY29tcHV0ZUxpbmVJbmZvcm1hdGlvbikob2xkVmFsdWUsIG5ld1ZhbHVlLCBkaXNhYmxlV29yZERpZmYsIGNvbXBhcmVNZXRob2QsIGxpbmVzT2Zmc2V0LCB0aGlzLnByb3BzLmFsd2F5c1Nob3dMaW5lcyk7XG4gICAgICAgICAgICBjb25zdCBleHRyYUxpbmVzID0gdGhpcy5wcm9wcy5leHRyYUxpbmVzU3Vycm91bmRpbmdEaWZmIDwgMFxuICAgICAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgICAgIDogTWF0aC5yb3VuZCh0aGlzLnByb3BzLmV4dHJhTGluZXNTdXJyb3VuZGluZ0RpZmYpO1xuICAgICAgICAgICAgY29uc3QgeyBsaW5lQmxvY2tzLCBibG9ja3MgfSA9ICgwLCBjb21wdXRlX2hpZGRlbl9ibG9ja3NfMS5jb21wdXRlSGlkZGVuQmxvY2tzKShsaW5lSW5mb3JtYXRpb24sIGRpZmZMaW5lcywgZXh0cmFMaW5lcyk7XG4gICAgICAgICAgICByZXR1cm4gbGluZUluZm9ybWF0aW9uLm1hcCgobGluZSwgbGluZUluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuc2hvd0RpZmZPbmx5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJsb2NrSW5kZXggPSBsaW5lQmxvY2tzW2xpbmVJbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChibG9ja0luZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RMaW5lT2ZCbG9jayA9IGJsb2Nrc1tibG9ja0luZGV4XS5lbmRMaW5lID09PSBsaW5lSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc3RhdGUuZXhwYW5kZWRCbG9ja3MuaW5jbHVkZXMoYmxvY2tJbmRleCkgJiYgbGFzdExpbmVPZkJsb2NrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgoMCwganN4X3J1bnRpbWVfMS5qc3gpKFJlYWN0LkZyYWdtZW50LCB7IGNoaWxkcmVuOiB0aGlzLnJlbmRlclNraXBwZWRMaW5lSW5kaWNhdG9yKGJsb2Nrc1tibG9ja0luZGV4XS5saW5lcywgYmxvY2tJbmRleCwgbGluZS5sZWZ0LmxpbmVOdW1iZXIsIGxpbmUucmlnaHQubGluZU51bWJlcikgfSwgbGluZUluZGV4KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICghdGhpcy5zdGF0ZS5leHBhbmRlZEJsb2Nrcy5pbmNsdWRlcyhibG9ja0luZGV4KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGRpZmZOb2RlcyA9IHNwbGl0Vmlld1xuICAgICAgICAgICAgICAgICAgICA/IHRoaXMucmVuZGVyU3BsaXRWaWV3KGxpbmUsIGxpbmVJbmRleClcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLnJlbmRlcklubGluZVZpZXcobGluZSwgbGluZUluZGV4KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGlmZk5vZGVzO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucmVuZGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBvbGRWYWx1ZSwgbmV3VmFsdWUsIHVzZURhcmtUaGVtZSwgbGVmdFRpdGxlLCByaWdodFRpdGxlLCBzcGxpdFZpZXcsIGhpZGVMaW5lTnVtYmVycywgaGlkZU1hcmtlcnMsIG5vbmNlLCB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmNvbXBhcmVNZXRob2QgIT09IGNvbXB1dGVfbGluZXNfMS5EaWZmTWV0aG9kLkpTT04pIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9sZFZhbHVlICE9PSAnc3RyaW5nJyB8fCB0eXBlb2YgbmV3VmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdcIm9sZFZhbHVlXCIgYW5kIFwibmV3VmFsdWVcIiBzaG91bGQgYmUgc3RyaW5ncycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3R5bGVzID0gdGhpcy5jb21wdXRlU3R5bGVzKHRoaXMucHJvcHMuc3R5bGVzLCB1c2VEYXJrVGhlbWUsIG5vbmNlKTtcbiAgICAgICAgICAgIGNvbnN0IG5vZGVzID0gdGhpcy5yZW5kZXJEaWZmKCk7XG4gICAgICAgICAgICBsZXQgY29sU3Bhbk9uU3BsaXRWaWV3ID0gaGlkZUxpbmVOdW1iZXJzID8gMiA6IDM7XG4gICAgICAgICAgICBsZXQgY29sU3Bhbk9uSW5saW5lVmlldyA9IGhpZGVMaW5lTnVtYmVycyA/IDIgOiA0O1xuICAgICAgICAgICAgaWYgKGhpZGVNYXJrZXJzKSB7XG4gICAgICAgICAgICAgICAgY29sU3Bhbk9uU3BsaXRWaWV3IC09IDE7XG4gICAgICAgICAgICAgICAgY29sU3Bhbk9uSW5saW5lVmlldyAtPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY29sdW1uRXh0ZW5zaW9uID0gdGhpcy5wcm9wcy5yZW5kZXJHdXR0ZXIgPyAxIDogMDtcbiAgICAgICAgICAgIGNvbnN0IHRpdGxlID0gKGxlZnRUaXRsZSB8fCByaWdodFRpdGxlKSAmJiAoKDAsIGpzeF9ydW50aW1lXzEuanN4cykoXCJ0clwiLCB7IGNoaWxkcmVuOiBbKDAsIGpzeF9ydW50aW1lXzEuanN4KShcInRkXCIsIHsgY29sU3BhbjogKHNwbGl0VmlldyA/IGNvbFNwYW5PblNwbGl0VmlldyA6IGNvbFNwYW5PbklubGluZVZpZXcpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5FeHRlbnNpb24sIGNsYXNzTmFtZTogdGhpcy5zdHlsZXMudGl0bGVCbG9jaywgY2hpbGRyZW46ICgwLCBqc3hfcnVudGltZV8xLmpzeCkoXCJwcmVcIiwgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGVzLmNvbnRlbnRUZXh0LCBjaGlsZHJlbjogbGVmdFRpdGxlIH0pIH0pLCBzcGxpdFZpZXcgJiYgKCgwLCBqc3hfcnVudGltZV8xLmpzeCkoXCJ0ZFwiLCB7IGNvbFNwYW46IGNvbFNwYW5PblNwbGl0VmlldyArIGNvbHVtbkV4dGVuc2lvbiwgY2xhc3NOYW1lOiB0aGlzLnN0eWxlcy50aXRsZUJsb2NrLCBjaGlsZHJlbjogKDAsIGpzeF9ydW50aW1lXzEuanN4KShcInByZVwiLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZXMuY29udGVudFRleHQsIGNoaWxkcmVuOiByaWdodFRpdGxlIH0pIH0pKV0gfSkpO1xuICAgICAgICAgICAgcmV0dXJuICgoMCwganN4X3J1bnRpbWVfMS5qc3gpKFwidGFibGVcIiwgeyBjbGFzc05hbWU6ICgwLCBjbGFzc25hbWVzXzEuZGVmYXVsdCkodGhpcy5zdHlsZXMuZGlmZkNvbnRhaW5lciwge1xuICAgICAgICAgICAgICAgICAgICBbdGhpcy5zdHlsZXMuc3BsaXRWaWV3XTogc3BsaXRWaWV3LFxuICAgICAgICAgICAgICAgIH0pLCBjaGlsZHJlbjogKDAsIGpzeF9ydW50aW1lXzEuanN4cykoXCJ0Ym9keVwiLCB7IGNoaWxkcmVuOiBbdGl0bGUsIG5vZGVzXSB9KSB9KSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBleHBhbmRlZEJsb2NrczogW10sXG4gICAgICAgIH07XG4gICAgfVxufVxuRGlmZlZpZXdlci5kZWZhdWx0UHJvcHMgPSB7XG4gICAgb2xkVmFsdWU6ICcnLFxuICAgIG5ld1ZhbHVlOiAnJyxcbiAgICBzcGxpdFZpZXc6IHRydWUsXG4gICAgaGlnaGxpZ2h0TGluZXM6IFtdLFxuICAgIGRpc2FibGVXb3JkRGlmZjogZmFsc2UsXG4gICAgY29tcGFyZU1ldGhvZDogY29tcHV0ZV9saW5lc18xLkRpZmZNZXRob2QuQ0hBUlMsXG4gICAgc3R5bGVzOiB7fSxcbiAgICBoaWRlTGluZU51bWJlcnM6IGZhbHNlLFxuICAgIGhpZGVNYXJrZXJzOiBmYWxzZSxcbiAgICBleHRyYUxpbmVzU3Vycm91bmRpbmdEaWZmOiAzLFxuICAgIHNob3dEaWZmT25seTogdHJ1ZSxcbiAgICB1c2VEYXJrVGhlbWU6IGZhbHNlLFxuICAgIGxpbmVzT2Zmc2V0OiAwLFxuICAgIG5vbmNlOiAnJyxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBEaWZmVmlld2VyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-diff-viewer-continued/lib/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-diff-viewer-continued/lib/src/styles.js":
/*!********************************************************************!*\
  !*** ./node_modules/react-diff-viewer-continued/lib/src/styles.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst create_instance_1 = __importDefault(__webpack_require__(/*! @emotion/css/create-instance */ \"(ssr)/./node_modules/@emotion/css/create-instance/dist/emotion-css-create-instance.development.esm.js\"));\n// eslint-disable-next-line import/no-anonymous-default-export\nexports[\"default\"] = (styleOverride, useDarkTheme = false, nonce = '') => {\n    const { variables: overrideVariables = {} } = styleOverride, styles = __rest(styleOverride, [\"variables\"]);\n    const themeVariables = {\n        light: Object.assign({\n            diffViewerBackground: '#fff',\n            diffViewerColor: '#212529',\n            addedBackground: '#e6ffed',\n            addedColor: '#24292e',\n            removedBackground: '#ffeef0',\n            removedColor: '#24292e',\n            changedBackground: '#fffbdd',\n            wordAddedBackground: '#acf2bd',\n            wordRemovedBackground: '#fdb8c0',\n            addedGutterBackground: '#cdffd8',\n            removedGutterBackground: '#ffdce0',\n            gutterBackground: '#f7f7f7',\n            gutterBackgroundDark: '#f3f1f1',\n            highlightBackground: '#fffbdd',\n            highlightGutterBackground: '#fff5b1',\n            codeFoldGutterBackground: '#dbedff',\n            codeFoldBackground: '#f1f8ff',\n            emptyLineBackground: '#fafbfc',\n            gutterColor: '#212529',\n            addedGutterColor: '#212529',\n            removedGutterColor: '#212529',\n            codeFoldContentColor: '#212529',\n            diffViewerTitleBackground: '#fafbfc',\n            diffViewerTitleColor: '#212529',\n            diffViewerTitleBorderColor: '#eee',\n        }, (overrideVariables.light || {})),\n        dark: Object.assign({\n            diffViewerBackground: '#2e303c',\n            diffViewerColor: '#FFF',\n            addedBackground: '#044B53',\n            addedColor: 'white',\n            removedBackground: '#632F34',\n            removedColor: 'white',\n            changedBackground: '#3e302c',\n            wordAddedBackground: '#055d67',\n            wordRemovedBackground: '#7d383f',\n            addedGutterBackground: '#034148',\n            removedGutterBackground: '#632b30',\n            gutterBackground: '#2c2f3a',\n            gutterBackgroundDark: '#262933',\n            highlightBackground: '#2a3967',\n            highlightGutterBackground: '#2d4077',\n            codeFoldGutterBackground: '#21232b',\n            codeFoldBackground: '#262831',\n            emptyLineBackground: '#363946',\n            gutterColor: '#666c87',\n            addedGutterColor: '#8c8c8c',\n            removedGutterColor: '#8c8c8c',\n            codeFoldContentColor: '#656a8b',\n            diffViewerTitleBackground: '#2f323e',\n            diffViewerTitleColor: '#555a7b',\n            diffViewerTitleBorderColor: '#353846',\n        }, (overrideVariables.dark || {})),\n    };\n    const variables = useDarkTheme ? themeVariables.dark : themeVariables.light;\n    const { css, cx } = (0, create_instance_1.default)({ key: 'react-diff', nonce });\n    const content = css({\n        width: '100%',\n        label: 'content',\n    });\n    const splitView = css({\n        [`.${content}`]: {\n            width: '50%',\n        },\n        label: 'split-view',\n    });\n    const diffContainer = css({\n        width: '100%',\n        background: variables.diffViewerBackground,\n        pre: {\n            margin: 0,\n            whiteSpace: 'pre-wrap',\n            lineHeight: '25px',\n        },\n        label: 'diff-container',\n        borderCollapse: 'collapse',\n    });\n    const codeFoldContent = css({\n        color: variables.codeFoldContentColor,\n        label: 'code-fold-content',\n    });\n    const contentText = css({\n        color: variables.diffViewerColor,\n        label: 'content-text',\n    });\n    const titleBlock = css({\n        background: variables.diffViewerTitleBackground,\n        padding: 10,\n        borderBottom: `1px solid ${variables.diffViewerTitleBorderColor}`,\n        label: 'title-block',\n        ':last-child': {\n            borderLeft: `1px solid ${variables.diffViewerTitleBorderColor}`,\n        },\n        [`.${contentText}`]: {\n            color: variables.diffViewerTitleColor,\n        },\n    });\n    const lineNumber = css({\n        color: variables.gutterColor,\n        label: 'line-number',\n    });\n    const diffRemoved = css({\n        background: variables.removedBackground,\n        color: variables.removedColor,\n        pre: {\n            color: variables.removedColor,\n        },\n        [`.${lineNumber}`]: {\n            color: variables.removedGutterColor,\n        },\n        label: 'diff-removed',\n    });\n    const diffAdded = css({\n        background: variables.addedBackground,\n        color: variables.addedColor,\n        pre: {\n            color: variables.addedColor,\n        },\n        [`.${lineNumber}`]: {\n            color: variables.addedGutterColor,\n        },\n        label: 'diff-added',\n    });\n    const diffChanged = css({\n        background: variables.changedBackground,\n        [`.${lineNumber}`]: {\n            color: variables.gutterColor,\n        },\n        label: 'diff-changed',\n    });\n    const wordDiff = css({\n        padding: 2,\n        display: 'inline-flex',\n        borderRadius: 4,\n        wordBreak: 'break-all',\n        label: 'word-diff',\n    });\n    const wordAdded = css({\n        background: variables.wordAddedBackground,\n        label: 'word-added',\n    });\n    const wordRemoved = css({\n        background: variables.wordRemovedBackground,\n        label: 'word-removed',\n    });\n    const codeFoldGutter = css({\n        backgroundColor: variables.codeFoldGutterBackground,\n        label: 'code-fold-gutter',\n    });\n    const codeFold = css({\n        backgroundColor: variables.codeFoldBackground,\n        height: 40,\n        fontSize: 14,\n        fontWeight: 700,\n        label: 'code-fold',\n        a: {\n            textDecoration: 'underline !important',\n            cursor: 'pointer',\n            pre: {\n                display: 'inline',\n            },\n        },\n    });\n    const emptyLine = css({\n        backgroundColor: variables.emptyLineBackground,\n        label: 'empty-line',\n    });\n    const marker = css({\n        width: 25,\n        paddingLeft: 10,\n        paddingRight: 10,\n        userSelect: 'none',\n        label: 'marker',\n        [`&.${diffAdded}`]: {\n            pre: {\n                color: variables.addedColor,\n            },\n        },\n        [`&.${diffRemoved}`]: {\n            pre: {\n                color: variables.removedColor,\n            },\n        },\n    });\n    const highlightedLine = css({\n        background: variables.highlightBackground,\n        label: 'highlighted-line',\n        [`.${wordAdded}, .${wordRemoved}`]: {\n            backgroundColor: 'initial',\n        },\n    });\n    const highlightedGutter = css({\n        label: 'highlighted-gutter',\n    });\n    const gutter = css({\n        userSelect: 'none',\n        minWidth: 50,\n        padding: '0 10px',\n        whiteSpace: 'nowrap',\n        label: 'gutter',\n        textAlign: 'right',\n        background: variables.gutterBackground,\n        '&:hover': {\n            cursor: 'pointer',\n            background: variables.gutterBackgroundDark,\n            pre: {\n                opacity: 1,\n            },\n        },\n        pre: {\n            opacity: 0.5,\n        },\n        [`&.${diffAdded}`]: {\n            background: variables.addedGutterBackground,\n        },\n        [`&.${diffRemoved}`]: {\n            background: variables.removedGutterBackground,\n        },\n        [`&.${highlightedGutter}`]: {\n            background: variables.highlightGutterBackground,\n            '&:hover': {\n                background: variables.highlightGutterBackground,\n            },\n        },\n    });\n    const emptyGutter = css({\n        '&:hover': {\n            background: variables.gutterBackground,\n            cursor: 'initial',\n        },\n        label: 'empty-gutter',\n    });\n    const line = css({\n        verticalAlign: 'baseline',\n        label: 'line',\n    });\n    const defaultStyles = {\n        diffContainer,\n        diffRemoved,\n        diffAdded,\n        diffChanged,\n        splitView,\n        marker,\n        highlightedGutter,\n        highlightedLine,\n        gutter,\n        line,\n        wordDiff,\n        wordAdded,\n        wordRemoved,\n        codeFoldGutter,\n        codeFold,\n        emptyGutter,\n        emptyLine,\n        lineNumber,\n        contentText,\n        content,\n        codeFoldContent,\n        titleBlock,\n    };\n    const computerOverrideStyles = Object.keys(styles).reduce((acc, key) => (Object.assign(Object.assign({}, acc), {\n        [key]: css(styles[key]),\n    })), {});\n    return Object.keys(defaultStyles).reduce((acc, key) => (Object.assign(Object.assign({}, acc), {\n        [key]: computerOverrideStyles[key]\n            ? cx(defaultStyles[key], computerOverrideStyles[key])\n            : defaultStyles[key],\n    })), {});\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-diff-viewer-continued/lib/src/styles.js\n");

/***/ })

};
;